export PATH=~/ks_ovirt_py_venv/bin:$PATH

python3 <<"EOF"
################################################################################
# TO ADD DISKS, JUST UPDATE THE ARRAY BELOW
NEW_DISK_SIZES = [100]
################################################################################

import logging
import time
import sys

import ovirtsdk4 as sdk
import ovirtsdk4.types as types

logging.basicConfig(stream=sys.stdout, level=logging.INFO)
logger = logging.getLogger("Attune")

# This example will connect to the server and create a new virtual machine:

# Create the connection to the server:
connection = sdk.Connection(
    url='https://{ovirtEngineServer.fqn}/ovirt-engine/api',
    username='{ovirtEngineApiUser.user}',
    password='{ovirtEngineApiUser.password}',
    insecure=True,
    debug=True,
    log=logger,
)
logger.info("Connection Successful")

logger.info("Getting system_service")
system_service = connection.system_service()

logger.info("Getting vms_service")
vms_service = system_service.vms_service()

logger.info("Getting the disks service for the new disk")
disks_service = system_service.disks_service()

logger.info("Searchig for VM 'name={targetServer.fqn}'")
vm = vms_service.list(search='name={targetServer.fqn}')[0]
logger.info("Found VM 'name={targetServer.fqn}'")

logger.info("Getting the disk service")
disk_attachments_service = vms_service.vm_service(vm.id).disk_attachments_service()

logger.info("Attaching the new disk")
for index, size in enumerate(NEW_DISK_SIZES):
    diskName='{targetServer.fqn}-disk%s' % (index + 1)
    
    logger.info("CREATING disk %s", diskName)
    disk_attachment = disk_attachments_service.add(
        types.DiskAttachment(
            disk=types.Disk(
                name=diskName,
                description=diskName,
                format=types.DiskFormat.RAW,
                provisioned_size=size * 2**30,
                storage_domains=[
                    types.StorageDomain(
                        name='{ovirtDiskStorageName}',
                    ),
                ],
            ),
            interface=types.DiskInterface.{ovirtDiskInterface},
            bootable=False,
            active=True,
        ),
    )
    disk_service = disks_service.disk_service(disk_attachment.disk.id)

    logger.info("Starting to wait for disk to become online")
    while True:
        time.sleep(1)
        
        disk = disk_service.get()
        if disk.status == types.DiskStatus.OK:
            break
            
        logger.info("Wait for disk to become online")
        time.sleep(5)

    logger.info("Starting to wait for disk to attatch")
    activeCheckCount = 0
    while True:
        time.sleep(1)
        
        logger.info("Getting detatched disks")
        disk_attachments = disk_attachments_service.list()
        disk_attachment = next(filter(lambda d: d.disk.id == disk_attachment.disk.id, 
                                      disk_attachments))

        if disk_attachment.active:
            logger.info("Disk attachment is active")
            break
            
        activeCheckCount += 1
        
        if activeCheckCount == 6:
            attachment_service = disk_attachments_service \
                .attachment_service(disk_attachment.id)
            logger.info("Retrying to activate disk attatchment %s", diskName)
            disk_attachment = attachment_service.update(
                types.DiskAttachment(
                    disk=disk,
                    active=True,
                ),
            )
            activeCheckCount = 0
            continue
        
        logger.info("Waiting for disk to attatch")
        time.sleep(5)
    
    
    time.sleep(5)
    logger.info("Disk is online and attatched")

# Close the connection to the server:
connection.close()


EOF
