export PATH=~/ks_ovirt_py_venv/bin:$PATH

python3 <<"EOF"
import logging
import time
import sys

import ovirtsdk4 as sdk
import ovirtsdk4.types as types

logging.basicConfig(stream=sys.stdout, level=logging.INFO)
logger = logging.getLogger("Attune")

# This example will connect to the server, search for a VM by name and
# remove it:

# Create the connection to the server:
connection = sdk.Connection(
    url='https://{ovirtEngineServer.fqn}/ovirt-engine/api',
    username='{ovirtEngineApiUser.user}',
    password='{ovirtEngineApiUser.password}',
    insecure=True,
    debug=True,
    log=logger,
)
logger.info("Connection Successful")

# Find the service that manages VMs:
logger.info("Getting system_service")
system_service = connection.system_service()

logger.info("Getting vms_service")
vms_service = system_service.vms_service()

# Find the VM:
logger.info("Searchig for VM 'name={targetServer.fqn}'")
try:
    vm = vms_service.list(search='name={targetServer.fqn}')[0]
    
except IndexError:
    logger.info("VM must not exist yet")
    exit(0)

# Note that the "vm" variable that we assigned above contains only the
# data of the VM, it doesn't have any method like "remove". Methods are
# defined in the services. So now that we have the description of the VM
# we can find the service that manages it, calling the locator method
# "vm_service" defined in the "vms" service. This locator method
# receives as parameter the identifier of the VM and retursn a reference
# to the service that manages that VM.

logger.info("Getting VM Service for VM ID=%s" % vm.id)
vm_service = vms_service.vm_service(vm.id)

try:
    logger.info("Stopping VM")
    vm_service.stop(async_=False)
    
    # Wait till the virtual machine is down:
    while True:
        time.sleep(5)
        vm = vm_service.get()
        if vm.status == types.VmStatus.DOWN:
            break
    
except:
    logger.info("VM Must have already been stopped")
    pass

logger.info("Deleting VM")
vm_service.remove(async_=False)

# Close the connection to the server:
connection.close()

EOF
